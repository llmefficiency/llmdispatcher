name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run linter
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint run

    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build & Release
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Build for multiple platforms
      run: |
        GOOS=linux GOARCH=amd64 go build -o dist/llmdispatcher-linux-amd64 ./cmd/example
        GOOS=darwin GOARCH=amd64 go build -o dist/llmdispatcher-darwin-amd64 ./cmd/example
        GOOS=darwin GOARCH=arm64 go build -o dist/llmdispatcher-darwin-arm64 ./cmd/example
        GOOS=windows GOARCH=amd64 go build -o dist/llmdispatcher-windows-amd64.exe ./cmd/example

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation links
      run: |
        # Check for broken links in markdown files
        find . -name "*.md" -exec grep -l "http" {} \; | xargs -I {} grep -o 'http[^)]*' {} | while read url; do
          if curl --output /dev/null --silent --head --fail "$url"; then
            echo "✅ $url"
          else
            echo "❌ $url"
            exit 1
          fi
        done

    - name: Validate markdown
      run: |
        # Install markdown lint
        npm install -g markdownlint-cli
        markdownlint "**/*.md" --ignore node_modules

  performance:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem ./internal/dispatcher/
        go test -bench=. -benchmem ./pkg/llmdispatcher/

    - name: Check binary size
      run: |
        go build -o llmdispatcher ./cmd/example
        ls -lh llmdispatcher
        if [ $(stat -f%z llmdispatcher 2>/dev/null || stat -c%s llmdispatcher 2>/dev/null) -gt 10485760 ]; then
          echo "❌ Binary size is too large (>10MB)"
          exit 1
        fi 